- Verknüpfung von Systemen
- Alternative zu (propriertären) Standards und Systemen wie RMI, RORBO, RFC und Techniken wie Sockets, Named Pipes und Shared Memory
- World Wide Web: technologische Hochleistung, Kern davon ist HTTP; diese Entwicklungen für andere Bereiche nutzen
- Zu Enge Kopplung von zwei Systemen ergibt ein großes System - gewollt? => "Lose Kopplung"
- REST EINE uniforme Schnittstelle, relative lose Kopplung zwischen Systemen
- HTTP als Protokoll ungeschlagen bezüglich Interoperabilität
- (Ungeachtet des Datenformats kann jeder REST Client mit jedem REST Server kommunizieren)
- Hohe Performance bei Verwendung von HTTP als Protokoll, bspw. auf Grund von Caches und Kompression
- Da keine Sitzungsbezogenen Information vorhanden skaliert HTTP sehr gut, geringerer Ressourcenverbrauch da Verbindungen nicht offen gehalten werden (KEEP-Alive ausgenommen)
	- Mehrere Anfragen hintereinander vom selben Client können von verschiedenen Servern beantwortet werden
- Unabhängig von Programmiersprachen und Plattformen da für jede (nennenswerte) Sprache und Plattform eine HTTP-Implementierung vorhanden ist bzw. diese in vertretbarem Aufwand auf Basis eines Netzwerkstacks entwickelt werden könnte
- Vorzeige-/Beispielprotokoll für REST: AtomPub
- Geht zurück auf "HTTP-Object-Model" von Fielding -> Sollte theoretisches Fundament des Webs bilden nachdem der ursprüngliche Ansatz statische Seite mit eindeutigen Identifikatoren durch dynamisch errechnete/generierte Inhalte immer mehr verwaschen wurden
- REST eine abstrakte Ebene über HTTP; wäre daher theoretisch auch mit einem anderen darunterliegenden Protokoll umsetzbar
- REST ist ein Architekturstil; SOAP hingegen ein konkretes XML-Format
- Triebfeder für Verbreitung von REST sind WebAPIs

- 5 Kernprinzipien:
	- Ressourcen mit eindeutiger Identifikation
		- URI als ID, URI ist weltweit einzigartig da globales Namenssystem
		- URI zudem weit bekannt und daher auch für nicht-technikaffine Menschen zu merken
		- Ermöglicht Gruppierung (http://example.com/customers/345 bzw. http://example.com/stores/12)
		- Nicht jede Entitätenmenge muss via URI ansprechbar sein; bspw. könnte ein Kunde ansprechbar sein, seine Straße jedoch nicht einzelnd
	- Verknüpfungen/Hypermedia
		- Links dienen zum Verknüpfen von Ressourcen und zur Steuerung des Applikationsflusses (Server kann Client bspw. mehrere Möglichkeiten in Form von verschiedenen Links anbieten, Client entscheidet dann über weiteren Ablauf)
	- Standardmethoden
		- HTTP-Methoden / HTTP-Verben:
			- GET
			- POST
			- DELETE
			- HEAD
			- PUT
			- OPTIONS
		- Dadurch, dass jede Ressource diese definierten Verben "implementiert" ist Sicherheit bezüglich des Ergebnisses gegeben (Typensichere Progammiersprachen: Rückgabe entspricht immer der Definition; Absicherung des Clients)
		- GET, PUT und DELETE sind idempotent; der (versehentliche) mehrfache Aufruf einer solchen Verknüpfung ist daher als "sicher" anzunehmen. Das Verhalten von POST hingegen kann nicht als "sicher" betrachtet werden.
	- Unterschiedliche Repräsentationen
		- Via HTTP Content Negotiation (Bsp.: "Accept: text/xml, text/html")
		- Daten sind so für mehr Clients interpretierbar
		- Ein Service kann bspw. durch parallele Auslieferung als HTML (bspw. neben JSON) direkt mit dem Browser angesrochen werden (WebAPI)
	- Statuslose Kommunikation
		- Zustand wird entweder vom Client gehalten oder vom SErver in einen Ressourcenstatus umgewandelt
		- Keine transiente Speicherung auf Serverseite über einen Request hinweg
		- Halten auf Client: Bspw. durch Einbettung in URI
		- Halten auf Server: Ressource bekommt einen Status zugewiesen (Warenkorb bekommt einen anderen Status je nachdem in welchem Schritt der Kunde sich befindet (Adresse, Bezahlung, Abgeschlossen))
		- 
		- Gründe dafür:
			- Skalierbarkeit
			- (Sehr viel losere Bindung zwischen Client und Server (Server könnte zwischen zwei (zusammenhängenden) Request bspw. Updates einspielen und  neustarten))


	- Beispiele:
		- Aus http://example.com/getCustomer?id=23 würde werden http://example.com/getCustomer/23
---> Seite 19